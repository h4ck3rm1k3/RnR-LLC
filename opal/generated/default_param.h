static const char *global_default_param =
"//\n"
"// Simultaneous-multithreading \n"
"// specifies number of logical processors per physical processor\n"
"CONFIG_LOGICAL_PER_PHY_PROC:  1\n"
"// specifies how many threads to fetch from in each cycle\n"
"CONFIG_FETCH_THREADS_PER_CYCLE:  2\n"
"\n"
"//\n"
"// Processor \"Width\" (issue, decode, retire width)\n"
"//\n"
"PSEQ_MAX_UNCHECKED: 1\n"
"FETCH_STAGES:  1\n"
"DECODE_STAGES: 1\n"
"RETIRE_STAGES: 1\n"
"MAX_FETCH: 4\n"
"MAX_DECODE: 4\n"
"MAX_DISPATCH: 4\n"
"MAX_EXECUTE: 4\n"
"MAX_RETIRE: 4\n"
"\n"
"//\n"
"// Register file\n"
"//\n"
"// physical = 160 (logical)*CONFIG_LOGICAL_PER_PHY_PROC + 64 (rename)\n"
"CONFIG_IREG_PHYSICAL: 0 \n"
"// physical = 64 (logical)*CONFIG_LOGICAL_PER_PHY_PROC + 128 (== 64 double precision)\n"
"// note: must be < 64K \n"
"CONFIG_FPREG_PHYSICAL: 0 \n"
"// physical = 5 (logical)*CONFIG_LOGICAL_PER_PHY_PROC + 64\n"
"CONFIG_CCREG_PHYSICAL: 0 \n"
"// number of control register sets\n"
"CONFIG_NUM_CONTROL_SETS: 64\n"
"\n"
"//\n"
"// # ALUs, ALU Latency\n"
"//\n"
"\n"
"CONFIG_ALU_MAPPING: (\n"
"    0, // FU_NONE,                 // inst does not use a functional unit\n"
"    1, // FU_INTALU,               // integer ALU\n"
"    1, // FU_INTMULT,              // integer multiplier\n"
"    2, // FU_INTDIV,               // integer divider\n"
"    3, // FU_BRANCH,               // compare / branch units\n"
"    4, // FU_FLOATADD,             // floating point adder/subtractor\n"
"    4, // FU_FLOATCMP,             // floating point comparator\n"
"    4, // FU_FLOATCVT,             // floating point<->integer converter\n"
"    5, // FU_FLOATMULT,            // floating point multiplier\n"
"    6, // FU_FLOATDIV,             // floating point divider\n"
"    6, // FU_FLOATSQRT,            // floating point square root\n"
"    7, // FU_RDPORT,               // memory read port\n"
"    8  // FU_WRPORT,               // memory write port\n"
"       // FU_NUM_FU_TYPES          // total functional unit classes\n"
")\n"
"\n"
"CONFIG_NUM_ALUS: (\n"
"  127, // inst does not use a functional unit\n"
"    4, // integer ALU (fused multiply/add)\n"
"    2, // integer divisor\n"
"    2, // compare branch units\n"
"    4, // FP ALU\n"
"    2, // FP multiply\n"
"    2, // FP divisor / square-root\n"
"    10, // load unit (memory read)\n"
"    10, // store unit (memory write)\n"
"    0,\n"
"    0,\n"
"    0,\n"
"    0\n"
")\n"
"\n"
"CONFIG_ALU_LATENCY: (\n"
"    1, // FU_NONE,                 // inst does not use a functional unit\n"
"    1, // FU_INTALU,               // integer ALU\n"
"    4, // FU_INTMULT,              // integer multiplier\n"
"   20, // FU_INTDIV,               // integer divider\n"
"    1, // FU_BRANCH,               // compare / branch units\n"
"    2, // FU_FLOATADD,             // floating point adder/subtractor\n"
"    2, // FU_FLOATCMP,             // floating point comparator\n"
"    2, // FU_FLOATCVT,             // floating point<->integer converter\n"
"    4, // FU_FLOATMULT,            // floating point multiplier\n"
"   12, // FU_FLOATDIV,             // floating point divider\n"
"   24, // FU_FLOATSQRT,            // floating point square root\n"
"    1, // FU_RDPORT,               // memory read port\n"
"    1  // FU_WRPORT,               // memory write port\n"
"       // FU_NUM_FU_TYPES          // total functional unit classes\n"
")\n"
"\n"
"//\n"
"// Caches, Memory System\n"
"//\n"
"\n"
"// Write Buffer\n"
"WRITE_BUFFER_SIZE: 0 \n"
"\n"
"// L1 inst cache\n"
"IL1_IDEAL: 0              // 1 -> ideal I cache\n"
"IL1_ASSOC: 2              // direct mapped\n"
"IL1_SET_BITS: 8           // 256 sets\n"
"IL1_BLOCK_BITS: 6         // 64  byte L1 cache line\n"
"IL1_MSHR_ENTRIES: 256\n"
"IL1_STREAM_BUFFERS: 0\n"
"IL1_NL_TYPE: 0            // default no next line prefetcher\n"
"IL1_NL_LINES: 0\n"
"ICACHE_CYCLE: 1           // selects multi-cycle fetch if > 1\n"
"FETCH_PASS_CACHE_LINE: 1  // properties of fetch, only affect simple FE\n"
"FETCH_PASS_TAKEN_BRANCH: 1\n"
"IL1_MSHR_QUEUE_SIZE: 32   // size of prefetch queue\n"
"IL1_MSHR_QUEUE_ISSUE_WIDTH: 2 // issue speed of the prefetch queue\n"
"\n"
"// L1 data cache\n"
"DL1_IDEAL: 0              // 1 -> ideal D cache\n"
"DL1_ASSOC: 2              // direct mapped\n"
"DL1_SET_BITS: 8           // 256 sets\n"
"DL1_BLOCK_BITS: 6         // 64  byte L1 cache line\n"
"DL1_MSHR_ENTRIES: 256\n"
"DL1_STREAM_BUFFERS: 0\n"
"\n"
"// L2 unified cache\n"
"L2_IDEAL: 0              // 1 -> ideal L2 cache\n"
"L2_ASSOC: 4             // 4 way set associative\n"
"L2_SET_BITS: 13          // 4096 sets\n"
"L2_BLOCK_BITS: 6         // 64 byte cache line\n"
"L2_MSHR_ENTRIES: 128\n"
"L2_STREAM_BUFFERS: 0\n"
"\n"
"// supported TLB sizes\n"
"TLB_NUM_ENTRIES: 64\n"
"TLB_NUM_PAGE_SIZES: 4\n"
"TLB_PAGE_SIZES: (8192, 65536, 524288, 4194304)\n"
"TLB_IS_IDEAL: 0\n"
"\n"
"// Memory latency\n"
"RUBY_CLOCK_DIVISOR: 1\n"
"L2_LATENCY: 6\n"
"MEMORY_DRAM_LATENCY: 80\n"
"MEMORY_OUTSTANDING_REQUESTS: 128\n"
"MEMOP_STALE_DATA: 0\n"
"L1_FILL_BUS_CYCLES: 1\n"
"L2_FILL_BUS_CYCLES: 11\n"
"\n"
"//\n"
"// Front-end (Fetch and Branch Prediction)\n"
"//\n"
"\n"
"// branch misprediction penalty\n"
"BRANCHPRED_MISPRED_PENALTY: 1\n"
"\n"
"// Load replay penalty\n"
"LOAD_REPLAY_PENALTY: 10\n"
"\n"
"// Turns on/off StoreSet predictor\n"
"STORESET_PREDICTOR: 1\n"
"\n"
"// YAGS parameters\n"
"BRANCHPRED_TYPE: YAGS \n"
"BRANCHPRED_PHT_BITS: 20\n"
"BRANCHPRED_EXCEPTION_BITS: 15\n"
"BRANCHPRED_TAG_BITS: 15\n"
"\n"
"// RAS parameters\n"
"RAS_BITS: 6                  // return address stack\n"
"RAS_EXCEPTION_TABLE_BITS: 6  // a simple exception table of the RAS\n"
"\n"
"// cascaded indirect branch predictor parameters\n"
"CAS_TABLE_BITS: 12\n"
"CAS_EXCEPT_BITS: 12\n"
"CAS_EXCEPT_SHIFT: 1\n"
"\n"
"// idealized gshare parameters (1 to use global history)\n"
"BRANCHPRED_USE_GLOBAL: 0\n"
"\n"
"//\n"
"// Instruction window, Re-order buffer sizes\n"
"//\n"
"\n"
"IWINDOW_ROB_SIZE: 64\n"
"IWINDOW_WIN_SIZE: 32\n"
"RESERVED_ROB_ENTRIES: 4\n"
"\n"
"//\n"
"// Statistics gathering functions\n"
"//\n"
"STAT_EXPENSIVE_PROFILE: 0\n"
"\n"
"//\n"
"// MLP statistics controls\n"
"//\n"
"\n"
"CHAIN_IDEAL_WINDOW: 0\n"
"CHAIN_IDEAL_BRANCH_PRED: 0\n"
"CHAIN_ST_LD_FORWARDING: 1\n"
"CHAIN_MP_MODE: 1\n"
"\n"
"//\n"
"// WATTCH power analysis\n"
"//\n"
"WATTCH_POWER: 0\n"
"PREFETCHER_POWER: 1\n"
"COMPRESSION_POWER: 0\n"
"//Used to simulate clock-gating of L1 banks\n"
"L1_BANKS: 2\n"
"// Used by the prefetcher\n"
"L1I_PF_STREAMS: 8\n"
"L1D_PF_STREAMS: 8\n"
"UNIT_PF_FILTERSIZE: 32\n"
"NONUNIT_PF_FILTERSIZE: 32\n"
"L1_L2_STARTUP_PFS: 6\n"
"\n"
"//\n"
"// Generated values: These values are changed by the code\n"
"//                   They are set here (to zero) only to avoid warnings.\n"
"//\n"
"\n"
"MEMOP_BLOCK_MASK: 0\n"
"IL1_NUM_SETS: 0\n"
"DL1_NUM_SETS: 0\n"
"CAS_TABLE_SIZE: 0\n"
"CAS_TABLE_MASK: 0\n"
"CAS_EXCEPT_SIZE: 0\n"
"CAS_EXCEPT_MASK: 0\n"
"\n"
"// Simulate a perfect L1-ICache?\n"
"PERFECT_ICACHE: 0\n"
"\n"
"// Enables check for correct cache-line permissions at retirement\n"
"// We should leave this off since Ruby sometimes calls Opal back without obtaining correct permissions (due to serialization of simulation steps )\n"
"RETIREMENT_CACHE_ACCESS: 1\n"
"\n"
"RANDOM_SEED: 0\n"
"\n"
;
