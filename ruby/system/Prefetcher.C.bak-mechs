
/*
 * Profiler.C
 * 
 * Description: See Profiler.h
 *
 * $Id$
 *
 */

#include "Address.h"
#include "Profiler.h"
#include "CacheProfiler.h"
#include "AddressProfiler.h"
#include "System.h"
#include "Network.h"
#include "PrioHeap.h"
#include "CacheMsg.h"
#include "Driver.h"
#include "Protocol.h"
#include "util.h"
#include "Map.h"
#include "Debug.h"
#include "MachineType.h"
#include "TransactionInterfaceManager.h"
#include "interface.h"
#include "XactVisualizer.h"
#include "XactProfiler.h"
#include "RequestMsg.h"
#include "RubySlicc_ComponentMapping.h"
#include "RubySlicc_Util.h"
#include "MessageBuffer.h"
#include "Prefetcher.h"
 
 Prefetcher::Prefetcher(AbstractChip* chip_ptr, int version)
 {

  if(isPrefetcher())
  {
    m_chip_ptr = chip_ptr;
    m_version = version;
  
    m_alterna=0;
  
     m_metodo= prefetchMechanism(); 
     m_adapt= adaptDegree();
     
     //parte adaptativa
     
     //{0,1,2,3,4,6,8,12,16,24,32,48,64};
     degrees[0]=0;
     degrees[1]=1;
     degrees[2]=2;
     degrees[3]=3;
     degrees[4]=4;
     degrees[5]=6;
     degrees[6]=8;
     degrees[7]=12;
     degrees[8]=16;
     degrees[9]=24;
     degrees[10]=32;
     degrees[11]=48;
     degrees[12]=64;    
     
     next_stop= 65536;
     min_owner=0;
 	for(int j=0; j<RubyConfig::numberOfProcsPerChip(); j++) {
 	  degree_index[j]=4;
      degree_incr[j]=1;
      
      misses_ant_tot[j]=0;
      misses_ant_par[j]=0;
      
      m_st_base_degree[j]=prefetchDegree();
    }
   
   
     //fin adaptativa
     
    //1=seqt, 2=pdfcm
    if(m_metodo==1)
    {
      
      //definimos cu‡l ser‡ el bloque pedido cada vez dependiendo de la configuraci—n con la que estemos trabajando
      //Actualmente bloques contiguos van a bancos contiguos (a slices contiguas) por lo que para que un procesador 
      //pida para s’ mismo hay que saltar #procs
      m_stride=RubyConfig::numberOfL2CachePerChip();
    }else if(m_metodo==2)
    {
      m_PDA_base_degree=prefetchDegree();
      m_PDA_degree=0;
      m_old_addr=Address(0);
      m_gen_last_addr=Address(0);
      m_pref_last_addr=Address(0);
      m_flag_cabeza=0;
      PDFCM_HT=(PDFCM_HT_entry *) calloc(PDFCM_HT_size, sizeof(PDFCM_HT_entry));
      PDFCM_DT=(PDFCM_DT_entry *) calloc(PDFCM_DT_size, sizeof(PDFCM_DT_entry));       
    } else if(m_metodo==3)
    {
      
      m_stride=RubyConfig::numberOfL2CachePerChip();      
      
    }else if(m_metodo==4)
    {
      
      m_stride=RubyConfig::numberOfL2CachePerChip();   
    }else if(m_metodo==5)
    {
      
      m_stride=RubyConfig::numberOfL2CachePerChip();   
    }else if(m_metodo==6)
    {
      
      m_stride=RubyConfig::numberOfL2CachePerChip();   
    }else if(m_metodo==7)
    {
      
      m_stride=RubyConfig::numberOfL2CachePerChip();   
    }else if(m_metodo==8)
    {
      
      m_stride=RubyConfig::numberOfL2CachePerChip();   
    }else if(m_metodo==9)
    {
      
      m_stride=RubyConfig::numberOfL2CachePerChip();   
    }else if(m_metodo==10)
    {
      
      m_stride=RubyConfig::numberOfL2CachePerChip();   
    }
    
    
     
     m_sent_prefetches=0;
  cout << "Soy un prefetcher " << version << " bits: " << RubyConfig::numberOfL2CachePerChip() << endl;
     
     cont.setSize(40);
     utiles.setSize(RubyConfig::numberOfProcsPerChip());
     inutiles.setSize(RubyConfig::numberOfProcsPerChip());
     tratadas.setSize(RubyConfig::numberOfProcsPerChip());
     insertadas.setSize(RubyConfig::numberOfProcsPerChip());
     
     for(int j=0; j<RubyConfig::numberOfProcsPerChip(); j++) 
     { 
       m_misses_sector[j]=0;
       m_misses_1[j]=0;
       insertadas[j]=0; tratadas[j]=0; utiles[j]=0;inutiles[j]=0;
       misses_epoch_1[j]=10000000000000;
     }
     misses_epoch_1_global=10000000000000;
     accesos_epoch_ref_global=0;
       for(int j=0; j< 40; j++)
       	 cont[j]=0;
  }

 }

  // Destructor
  Prefetcher::~Prefetcher(){0;}
  #define MASK_16b (0xffff)



  // Public Methods

//###################################################
  void Prefetcher::wakeup()
  { 
  Address predicted_address; 
 // cout << next_stop << " a:" << g_system_ptr->getDriver()->getCycleCount(m_version) << " version: " << m_version << endl;
  static int a=0;
    //parte adaptativa 
    if(m_adapt && next_stop <= g_system_ptr->getDriver()->getCycleCount(m_version))
    {
       
     // cout <<g_system_ptr->getDriver()->getCycleCount(m_version)  << " m_st_base_degree[j]: " << misses_ant_par[0] << "\t" <<  m_misses - misses_ant_tot[0] << "\t" ;
       cout <<g_system_ptr->getDriver()->getCycleCount(m_version)  << " m_st_base_degree[j]: " << accesos_epoch_ref_global << "\t" <<  accesos_epoch_1_global_tot << "\t" << g_system_ptr->getProfiler()->getL2Accesos() << "\t" ;
      for(int j=0; j<RubyConfig::numberOfProcsPerChip(); j++) {
 	    cout << m_st_base_degree[j] << "\t";      
      }
     
      cout <<endl;
     
      next_stop= g_system_ptr->getDriver()->getCycleCount(m_version) + 65536; //sig parada
      
      //automata 1: cada vez cambiamos el grado de un procesador pero mirando los fallos totales
      if(m_metodo==3)
      {
        
        //cambiamos el grado del que toca pero miramos los fallos de todos     
        //Hemos ido peor que en la epoca anterior --> cambiamos
        if(misses_epoch_1[0] < misses_this_epoch[0])
        //si vamos peor hay cambiar la pol’tica
          degree_incr[m_proc_cambia] *= -1;
        
        misses_epoch_1[0]=misses_this_epoch[0];
        misses_this_epoch[0]=0;
        
        
        //procesador que revisa su grado, en roundrobin
        m_proc_cambia= (m_proc_cambia < RubyConfig::numberOfProcsPerChip()-1) ? m_proc_cambia+1 : 0;
                
        degree_index[m_proc_cambia] += degree_incr[m_proc_cambia];
        if(degree_index[m_proc_cambia] <0) degree_index[m_proc_cambia]=0;
        if(degree_index[m_proc_cambia] >12) degree_index[m_proc_cambia]=12;
      
        m_st_base_degree[m_proc_cambia]=degrees[degree_index[m_proc_cambia]];
        
              
      } //metodo 3
      
      //automata 2: cada epoca cambiamos el grado de todos los proc mirando el num de fallos de cada proc
      else if(m_metodo==4)
      {
        for(int i=0; i<RubyConfig::numberOfProcsPerChip(); i++)
        {
        
        
          if(misses_ant_par[i] < m_misses_1[i] - misses_ant_tot[i])
          //si vamos peor hay cambiar la pol’tica
            degree_incr[i] *= -1;
                
          degree_index[i] += degree_incr[i];
          if(degree_index[i] <0) degree_index[i]=0;
          if(degree_index[i] >12) degree_index[i]=12;
      
          m_st_base_degree[i]=degrees[degree_index[i]];
        
      
          misses_ant_par[i]= m_misses_1[i] - misses_ant_tot[i];
          misses_ant_tot[i]= m_misses_1[i];
        }
      } //metodo 4
      
      //automata 2b: cada epoca cambiamos el grado de todos los proc mirando el num de fallos total
      //Adaptativo grado global
      else if(m_metodo==5)
      {
        for(int i=0; i<RubyConfig::numberOfProcsPerChip(); i++)
        {
        
          //cambiamos el grado del que toca pero miramos los fallos de todos     
          if(accesos_epoch_ref_global > g_system_ptr->getProfiler()->getL2Accesos()-accesos_epoch_1_global_tot )
          //si vamos peor hay cambiar la pol’tica
            degree_incr[i] *= -1;
                
          degree_index[i] += degree_incr[i];
          if(degree_index[i] <0) degree_index[i]=0;
          if(degree_index[i] >12) degree_index[i]=12;
      
          m_st_base_degree[i]=degrees[degree_index[i]];
        }
        
        accesos_epoch_ref_global=g_system_ptr->getProfiler()->getL2Accesos() - accesos_epoch_1_global_tot;
        accesos_epoch_1_global_tot=g_system_ptr->getProfiler()->getL2Accesos();
        
        
  //       cout  << " misses_ant_par[0]: " << misses_ant_par[0] << "\t" <<  m_misses - misses_ant_tot[0] << endl ;
         
      } //metodo 5
      
      else if(m_metodo==6 || m_metodo==7)
      {
        for(int i=0; i<RubyConfig::numberOfProcsPerChip(); i++)
        {
        
          //cambiamos el grado del que toca pero miramos los fallos totales en el sector   
          if(misses_ant_par[i] < m_misses_sector[i] - misses_ant_tot[i])
          //si vamos peor hay cambiar la pol’tica
            degree_incr[i] *= -1;
                
          degree_index[i] += degree_incr[i];
          if(degree_index[i] <0) degree_index[i]=0;
          if(degree_index[i] >12) degree_index[i]=12;
      
          m_st_base_degree_matrix[i][i]=degrees[degree_index[i]];
          
          misses_ant_par[i]= m_misses_sector[i] - misses_ant_tot[i];
          misses_ant_tot[i]= m_misses_sector[i];
        }
        for(int i=0; i<RubyConfig::numberOfProcsPerChip(); i++)
          for(int j=0; j<RubyConfig::numberOfProcsPerChip(); j++)
       	    if(i!=j) m_st_base_degree_matrix[i][j]=m_st_base_degree_matrix[j][j];
       	    
      } //metodo 6
      
      else if(m_metodo==8)
      {
       
        //cambiamos el grado del que toca pero miramos los fallos de todos     
        //Hemos ido peor que en la epoca anterior --> cambiamos
        
        if(misses_epoch_1_global < misses_this_epoch_global)
        { //si vamos peor hay cambiar la pol’tica
          degree_incr[m_proc_cambia] *= -1;
          
          //cambiamos el grado ya
          degree_index[m_proc_cambia] += degree_incr[m_proc_cambia];
          if(degree_index[m_proc_cambia] <0) degree_index[m_proc_cambia]=0;
          if(degree_index[m_proc_cambia] >12) degree_index[m_proc_cambia]=12;
          
          m_st_base_degree[m_proc_cambia]=degrees[degree_index[m_proc_cambia]];      
          
        } else misses_epoch_1_global=misses_this_epoch_global;
        
        misses_this_epoch_global=0;
        
        
        //procesador que revisa su grado, en roundrobin
        m_proc_cambia= (m_proc_cambia < RubyConfig::numberOfProcsPerChip()-1) ? m_proc_cambia+1 : 0;
                
        degree_index[m_proc_cambia] += degree_incr[m_proc_cambia];
        if(degree_index[m_proc_cambia] <0) degree_index[m_proc_cambia]=0;
        if(degree_index[m_proc_cambia] >12) degree_index[m_proc_cambia]=12;
      
        m_st_base_degree[m_proc_cambia]=degrees[degree_index[m_proc_cambia]];
        
      } //metodo 8
       else if(m_metodo==9)
      {
       
       //cambiamos el grado del que toca pero miramos los fallos de todos     
        //Hemos ido peor que en la epoca anterior --> cambiamos
        
        if(misses_epoch_1_global < misses_this_epoch_global)
        { //si vamos peor hay cambiar la pol’tica
          degree_incr[m_proc_cambia] *= -1;
          
          //cambiamos el grado ya
          degree_index[m_proc_cambia] += degree_incr[m_proc_cambia];
          if(degree_index[m_proc_cambia] <0) degree_index[m_proc_cambia]=0;
          if(degree_index[m_proc_cambia] >12) degree_index[m_proc_cambia]=12;
          
          m_st_base_degree[m_proc_cambia]=degrees[degree_index[m_proc_cambia]]; 
          if(min_owner==m_proc_cambia) misses_epoch_1_global=misses_this_epoch_global;
          
        } else
        {
        	misses_epoch_1_global=misses_this_epoch_global;
        	min_owner=m_proc_cambia;
        }
        
        misses_this_epoch_global=0;
        
        
        //procesador que revisa su grado, en roundrobin
        m_proc_cambia= (m_proc_cambia < RubyConfig::numberOfProcsPerChip()-1) ? m_proc_cambia+1 : 0;
                
        degree_index[m_proc_cambia] += degree_incr[m_proc_cambia];
        if(degree_index[m_proc_cambia] <0) degree_index[m_proc_cambia]=0;
        if(degree_index[m_proc_cambia] >12) degree_index[m_proc_cambia]=12;
      
        m_st_base_degree[m_proc_cambia]=degrees[degree_index[m_proc_cambia]];
        
      } //metodo 9
      else if(m_metodo==10)
      {       
        
        //cambiamos el grado del que toca pero miramos los fallos de todos     
        //Hemos ido peor que en la epoca anterior --> cambiamos
       
       if(accesos_epoch_ref_global > g_system_ptr->getProfiler()->getL2Accesos()-accesos_epoch_1_global_tot )
        { //si vamos peor hay cambiar la pol’tica
          degree_incr[m_proc_cambia] *= -1;
         
          //cambiamos el grado ya
          degree_index[m_proc_cambia] += degree_incr[m_proc_cambia];
          if(degree_index[m_proc_cambia] <0) degree_index[m_proc_cambia]=0;
          if(degree_index[m_proc_cambia] >12) degree_index[m_proc_cambia]=12;
          
          m_st_base_degree[m_proc_cambia]=degrees[degree_index[m_proc_cambia]]; 
          if(min_owner==m_proc_cambia)
          {
            accesos_epoch_ref_global=g_system_ptr->getProfiler()->getL2Accesos() - accesos_epoch_1_global_tot;
            
            
          }
          
        } else
        {
        	accesos_epoch_ref_global=g_system_ptr->getProfiler()->getL2Accesos() - accesos_epoch_1_global_tot;
           // accesos_epoch_1_global_tot=g_system_ptr->getProfiler()->getL2Accesos();
        	min_owner=m_proc_cambia;
        }
        accesos_epoch_1_global_tot=g_system_ptr->getProfiler()->getL2Accesos();
        
        //misses_this_epoch_global=0;
        
        
        //procesador que revisa su grado, en roundrobin
        m_proc_cambia= (m_proc_cambia < RubyConfig::numberOfProcsPerChip()-1) ? m_proc_cambia+1 : 0;
                
        degree_index[m_proc_cambia] += degree_incr[m_proc_cambia];
        if(degree_index[m_proc_cambia] <0) degree_index[m_proc_cambia]=0;
        if(degree_index[m_proc_cambia] >12) degree_index[m_proc_cambia]=12;
      
        m_st_base_degree[m_proc_cambia]=degrees[degree_index[m_proc_cambia]];
        
        
      } //metodo 10
      
      //parte nueva con el sistema para cambiar de prefetcher
      if(m_alterna)
      {
        m_etapa_actual++;
        if(!m_test) //fase normal
        {
          m_ultima_epoca=misses_ant_par[m_proc_miss];
          if(m_etapa_actual>10) { m_test=1; m_metodo=m_metodo==1 ? 2 : 1; m_etapa_actual=0; }  //10 etapas de ejecuci—n
        } 
        else  //fase test
        {          
          if(m_etapa_actual>2) //3 etapas de test
          { 
            if(misses_ant_par[m_proc_miss]<m_ultima_epoca) //si conseguimos menos rendimiento en el test, dejamos el que ten’amos antes
            {
               m_metodo=m_metodo==1 ? 2 : 1;
            }
           m_test=0; 
           m_etapa_actual=0; 
          }
        }
      }  //parte alterna
      
     // cout << "revision:" << m_version << " grado:" << m_PDA_base_degree << " ind:" << degree_index << " incr:"<< degree_incr<< endl;
    } //parte adaptativa
    
    
  if(m_metodo==1 || m_metodo==3  || m_metodo==4 || m_metodo==5 || m_metodo==6 || m_metodo==7|| m_metodo==8|| m_metodo==9|| m_metodo==10)  //SEQT
  {
  
     Address aux2, aux=m_last_addr[m_proc_miss];
     
     //Direcci—n del siguiente bloque
     m_last_addr[m_proc_miss].setAddress( m_last_addr[m_proc_miss].maskLowOrderBits(RubyConfig::dataBlockBits()) + m_stride*RubyConfig::dataBlockBytes()); 
      aux2=m_last_addr[m_proc_miss];
      
      aux.makePageAddress();
      aux2.makePageAddress();
      //Si la prebœsqueda va a una p‡gina distinta, no la queremos
     if(aux == aux2)
      {   
       //buscamos la prebœsqueda en el buffer, si no est‡ la insertamos
        RequestMsg out_msg;
        
        if(!buffer.esta(m_last_addr[m_proc_miss])) buffer.insert(m_last_addr[m_proc_miss]);
       if(!buffer.empty())
       {
        //extraemos la prebusqueda que toca del buffer 
        (out_msg).m_Address = buffer.remove();
      
        //CAMBIAR PARA A„ADIR ESCRITURA!!!  --> cambiado
        (out_msg).m_Type = m_tipo==1 ? CoherenceRequestType_PREFS : CoherenceRequestType_PREFS;
        (out_msg).m_MessageSize = MessageSizeType_Control;
        (out_msg).m_RequestorMachId = m_requestor;
        
        m_chip_ptr->m_L2Cache_prefetchQueue_vec[m_version]->enqueue(out_msg, 1);
  
        Time current_time = g_eventQueue_ptr->getTime();
     
        if(m_st_degree[m_proc_miss] > 0)
        {
  	      g_eventQueue_ptr->scheduleEvent(this, 1);
  	      m_st_degree[m_proc_miss]--;
  	    }
  	   }
  	  }
  	  
  } else if (m_metodo==2)  //PDFCM
  {
  
     predicted_address = Address(0); 
     if(m_flag_cabeza)
     {
       m_flag_cabeza=0;
      if(PDFCM_update_and_predict())
       {
         //cambio variables generador
         m_PDA_degree=m_PDA_base_degree;
         m_gen_last_addr=m_pref_last_addr;
         m_gen_history=m_pref_history;
       }
     }
     if(m_PDA_degree>0)
     {    
       predicted_address = PDFCM_predict_next(); 
      }
       
       
     if (predicted_address.getAddress() && predicted_address!=m_gen_last_addr  )
     {
        RequestMsg out_msg;
        
        //buscamos la prebœsqueda en el buffer, si no est‡ la insertamos
        
        if(!buffer.esta(predicted_address)) buffer.insert(predicted_address);
              
        //extraemos la prebusqueda que toca del buffer 
      if(!buffer.empty())
      {
        (out_msg).m_Address = buffer.remove();
        //CAMBIAR PARA A„ADIR ESCRITURA!!!

        (out_msg).m_Type = m_tipo==1 ? CoherenceRequestType_PREFS : CoherenceRequestType_PREFS;
        (out_msg).m_MessageSize = MessageSizeType_Control;
        (out_msg).m_RequestorMachId = m_requestor;
        m_chip_ptr->m_L2Cache_prefetchQueue_vec[m_version]->enqueue(out_msg, 1);
        
        m_old_addr=m_gen_last_addr;
        m_gen_last_addr= predicted_address;  
        
        if(m_PDA_degree > 0)
        {
          m_PDA_degree--; 
          g_eventQueue_ptr->scheduleEvent(this, 1);	  
           
	    }
	   }
      }
         
  
    
  }//PDFCM 
  
  
  insertadas[L1CacheMachIDToProcessorNum(m_requestor)]++;
  
} //wakeup
  


#define MASK_16b (0xffff)

    int Prefetcher::PDFCM_update_and_predict (){
      Address new_last_addr;
      unsigned short new_history;
      short actual_delta, predicted_delta;
      Address pc=m_last_pc[m_proc_miss], addr=m_pref_last_addr;
      
      // read PDFCM_HT entry
      unsigned int index = pc.getAddress() & PDFCM_HT_mask;
      Address old_last_addr = PDFCM_HT[index].last_addr; 
      unsigned short old_history = PDFCM_HT[index].history; 
      char count = PDFCM_HT[index].count;
   
      if (PDFCM_HT[index].PC != pc ){
         // if it's a new PC replace the entry
         m_pref_history=0;
         PDFCM_HT[index].PC=pc;
         PDFCM_HT[index].history=0; 
         PDFCM_HT[index].last_addr=Address(addr.getLineAddress());
         PDFCM_HT[index].count=0;
         PDFCM_HT[index].tipo=m_tipo;
         //PDFCM_HT[index].proc=
      
      return 0;
      }
   
      // compute deltas & update confidence counter
      predicted_delta=PDFCM_DT[old_history].delta;
     
     actual_delta = addr.getLineAddress()-old_last_addr.getAddress();
     
  //    cout << "real: " << actual_delta << " pred: " << predicted_delta << endl;
      if (actual_delta==predicted_delta){
         if (count<3) count++;
      }
      else{ 
         if (count>0) count--;
        
      }

      // compute new history
      
      m_pref_history = PDFCM_hash(old_history, actual_delta);
    //cout << "history: " << m_pref_history << endl;
      // write PDFCM_HT entry
   
      PDFCM_HT[index].last_addr = Address(addr.getLineAddress());
      PDFCM_HT[index].history   = m_pref_history;
      PDFCM_HT[index].count=count;
   
      // update PDFCM_DT entry
      PDFCM_DT[old_history].delta = actual_delta;
   
      // predict a new delta using the new history 
      if (count<2) 
      { 
        return 0;
      }
      else 
      {      
        return 1;       
      }
   }

    Address Prefetcher::PDFCM_predict_next (){
      int delta;
       
      // compute delta 
      
  
  
    // predict a new delta using the new history   
      Address aux, aux2;
      aux= m_gen_last_addr;
      aux2= Address(m_gen_last_addr.getAddress() + (PDFCM_DT[m_gen_history].delta << RubyConfig::dataBlockBits()));
      aux2.makeLineAddress();
      
	  aux.makePageAddress();
      aux2.makePageAddress(); 
      if(aux==aux2)
      {
        
        //Address aux3=Address(m_last_addr.getAddress() + (PDFCM_DT[m_history].delta <<  RubyConfig::dataBlockBits()));
      	aux2= Address(m_gen_last_addr.getAddress() + (PDFCM_DT[m_gen_history].delta << RubyConfig::dataBlockBits()));
        aux2.makeLineAddress();
      	
      	delta=PDFCM_DT[m_gen_history].delta;
      	m_gen_history=PDFCM_hash(m_gen_history, delta);
      	return aux2;
      } else
        return Address(0);
   }

    unsigned short Prefetcher::PDFCM_hash (unsigned short old_history, short delta){
    // R5-->  R(16, 16, 16)  F(t, t, t)  S(10, 5, 0) ; (number of entries of PDFCM_DT = 2^t)
   
      unsigned short select, folded, shift;
      select = delta;
   
      for(folded=0; select;) {
         folded ^= select & PDFCM_DT_mask;  // fold t bits
         select= select >> PDFCM_DT_bits;
      }
      shift = (old_history << 5) & PDFCM_DT_mask;     // shift 5 bits   
      return shift ^ folded;
   }

//##############################################

  void Prefetcher::firstUse(Address addr, Address pc, int tipo)
  {
  //	cout << "firstUse " <<  int_to_string(g_eventQueue_ptr->getTime()) << endl;
  Time current_time = g_eventQueue_ptr->getTime();
  m_tipo=tipo;
  //CAMBIAR!!
  
  
  if(m_metodo==1)
  {
    m_st_degree[m_proc_miss]=m_st_base_degree[m_proc_miss];
     m_last_addr[m_proc_miss]=Address(addr.maskLowOrderBits(RubyConfig::dataBlockBits()));
    
  } else if(m_metodo==2)
  {
    m_last_pc[m_proc_miss]=pc;
    m_pref_last_addr=Address(addr.maskLowOrderBits(RubyConfig::dataBlockBits()));
    m_flag_cabeza=1;
  }

    g_eventQueue_ptr->scheduleEvent(this, 1); 
    
  }
  
  
  
  //#############################################
  
  
  void Prefetcher::miss(Address addr, Address pc, int tipo, MachineID node)
  {
    	 //cout << "Prebuscador " <<  m_version << " @pc: " << pc << " node: " << node << " this: " << this << " ent:" << L1CacheMachIDToProcessorNum(node)<< endl;

  Time current_time = g_eventQueue_ptr->getTime();
  m_requestor=node;
  
  //CAMBIAR PARA A„ADIR ESCRITURA!!!  --> cambiado

  m_tipo= tipo;
 // if(tipo!=1) return; 
  
  m_proc_miss=L1CacheMachIDToProcessorNum(node);
  int sector, aux;
  switch(m_metodo)
  {
  	
    case 3:
    case 4:
    case 5:
    case 8:
    case 9:
    case 10:
  //seqt
    case 1:    
     m_st_degree[m_proc_miss]=m_st_base_degree[m_proc_miss];
     m_last_addr[m_proc_miss]=Address(addr.maskLowOrderBits(RubyConfig::dataBlockBits()));
     if(m_alterna) 
     {
       m_last_pc[m_proc_miss]=Address((pc.getAddress() << RubyConfig::procsPerChipBits()) + machineIDToVersion(node));
       m_pref_last_addr=Address(addr.maskLowOrderBits(RubyConfig::dataBlockBits()));
       PDFCM_update_and_predict();
     }
     break;
   	case 2:
    // std::cout << "AAA: " << machineIDToVersion(node) << endl;
     m_last_pc[m_proc_miss]=Address((pc.getAddress() << RubyConfig::procsPerChipBits()) + machineIDToVersion(node));
     m_pref_last_addr=Address(addr.maskLowOrderBits(RubyConfig::dataBlockBits()));
     m_flag_cabeza=1;
     break;
   	case 6:
   	
   	  sector = addr.bitSelect(RubyConfig::dataBlockBits()+1,  RubyConfig::dataBlockBits()+RubyConfig::procsPerChipBits());    
   	  //cout << sector << " ";
   	  m_misses_sector[sector]++;
	  m_st_degree[m_proc_miss]=m_st_base_degree_matrix[sector][m_proc_miss];
      m_last_addr[m_proc_miss]=Address(addr.maskLowOrderBits(RubyConfig::dataBlockBits())); 
    break;
    case 7:
      sector = addr.bitSelect(BITS_SECTOR-RubyConfig::procsPerChipBits(), BITS_SECTOR-1);    
   	  //cout << sector << " ";
   	  m_misses_sector[sector]++;
	  m_st_degree[m_proc_miss]=m_st_base_degree_matrix[sector][m_proc_miss];
      m_last_addr[m_proc_miss]=Address(addr.maskLowOrderBits(RubyConfig::dataBlockBits())); 
   default:
   break;
  }
	misses_this_epoch_global++;
	misses_this_epoch[m_proc_miss]++;
	m_misses++;
	m_misses_1[m_proc_miss]++;
	
    g_eventQueue_ptr->scheduleEvent(this, 1);
  }
  
 

void Prefetcher::print(ostream& out) const { 0;}
  
  void Prefetcher::printConfig(ostream& out)
 {
 0;
}

//Si recibimos un:
//mirar documento externo
 void Prefetcher::stats(int t)
 {
   if(t<0 || t>21) {ERROR_MSG("Parametro fuera de rango");}
   else
     cont[t]++;
  }


 void Prefetcher::stats2(int t, MachineID node)
 {
  // cout << node << endl;
   int proc=L1CacheMachIDToProcessorNum(node);
   if(t<0 || t>21) {ERROR_MSG("Parametro fuera de rango");}
   else
     switch(t)
     {
       case 0:
         tratadas[proc]++;
         break;
       case 1:
       case 2:
         utiles[proc]++;
         break;
       case 3:
         inutiles[proc]++;
         break;
       default:
         break;
     }
  }

void Prefetcher::clearStats()
{

   for(int j=0; j<RubyConfig::numberOfProcsPerChip(); j++) { insertadas[j]=0; tratadas[j]=0; utiles[j]=0;inutiles[j]=0; }
    
       for(int j=0; j< 40; j++)
       	 cont[j]=0;
  
  
}
void Prefetcher::printStats(ostream& out)
{
  out << cont << endl;
  out << "insertadas: " << insertadas << endl;
  out << "tratadas: " << tratadas << endl;
  out << "utiles: " << utiles << endl;
  out << "inutiles: " << inutiles << endl;
}
  // Private copy constructor and assignment operator
 // Prefetcher::Prefetcher(const Prefetcher& obj) {0; }
  //	Prefetcher::Prefetcher& operator=(const Prefetcher& obj)  {0; }
  
