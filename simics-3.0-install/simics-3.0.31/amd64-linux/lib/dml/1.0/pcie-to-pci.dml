dml 1.0;

import "pci-bridge.dml";
parameter pcie_device = true;

// Compute the map of the PCI configuration space of the secondary bus to put it
// in the primary bus configuration space
method compute_conf_space_window(map, sec, sub) default 
{
    map->base = sec << 20;
    map->start = sec << 20;
    map->length = (1 << 20) * (sub - sec + 1);    
}

implement pci_express {
    method send_message(conf_object_t *src, pcie_message_type_t type, 
                        byte_string_t payload) -> (int h) default {
        // send message to implement
        h = 0;
    }
}

// register a translate method to convert the access from PCIe to PCI
implement translate {
    method translate(generic_transaction_t *memop, map_info_t mapinfo) 
        -> (conf_object_t *ret) {
        local uint64 pa = memop->physical_address;

        // this function is called for all bridge mappings, but we need only to
        // translate the configuration accesses
        if (mapinfo.function == DOWNSTREAM_CONF) {
            memop->physical_address = (pa[27:12] << 8) | pa[7:0];
            log "info", 2, PCI_bridge:
            "Converting PCIE configuration address %#x to PCI configuration address %#x",
                pa, memop->physical_address;
        }
        ret = NULL;
    }
}
