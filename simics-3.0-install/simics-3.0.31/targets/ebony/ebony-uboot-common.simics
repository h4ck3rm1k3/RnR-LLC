# Ebony running the u-boot firmware

if not defined do_boot      {$do_boot  = "yes"}
if not defined ebony_u_boot {$ebony_u_boot = "u-boot-1.1.2"}
if not defined boot_command {$boot_command = "setenv bootargs rw; bootm ffc00000 ffd00000"}

# This can produce all kinds of strange errors,
# so we should probably give the user a heads up here.
if $memory_megs > 256  {
	echo "---"
	echo "You are currently running the Ebony configuration with"
	echo "more than 256MB of simulated RAM. Please note that this"
	echo "is not well supported in u-boot, even when compiling"
	echo "with the CONFIG_VERY_BIG_RAM option enabled."
	echo "---"
}

run-command-file "%script%/ebony-system.include"

instantiate-components

$eth_comp = $system
$eth_cnt = emac0
run-command-file "%simics%/targets/common/add-eth-link.include"

run-command-file "%script%/ebony-setup.include"

$plb = ($system.get-component-object plb)
$plb.load-binary $ebony_u_boot 0x100000000

# The initrd image overwrites the MAC addresses, restore here
@from components import mac_as_list
@plb = sim.objects[simenv.system].object_list['plb']
@plb.memory[[0x1fffffe0c, 0x1fffffe11]] = mac_as_list(simenv.mac_address)
@plb.memory[[0x1fffffe18, 0x1fffffe1d]] = mac_as_list(simenv.mac_address1)

if $do_boot == "yes" {
    script-branch {
        local $con = ($console.get-component-object con)
    	local $cmd = $boot_command
    	# Wait for u-boot prompt, type boot
    	$con.wait-for-string "=>"
    	$con.input $cmd + "\n"
    }
}
